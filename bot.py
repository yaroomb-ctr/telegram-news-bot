import logging
import sqlite3
import feedparser
import asyncio
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import os



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RSS_FEED_URLS = [
    "https://spbnews78.ru/rss.xml",
    #"https://lenta.ru/rss",
    #"https://ria.ru/export/rss2/archive/index.xml",
    "https://www.kommersant.ru/RSS/news.xml",
    "https://www.woman.ru/rss-feeds/rss.xml"
]

CHECK_INTERVAL = 3800  # —Å–µ–∫—É–Ω–¥
CLEANUP_INTERVAL = 86400  # –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
DATABASE_FILE = "news_bot.db"
NEWS_RETENTION_DAYS = 20

CHANNELS = {
    "—Å–ø–æ—Ä—Ç": {
        "link": "https://t.me/spgnovosti",
        "chat_id": "@spgnovosti"
    },
    "—ç–∫–æ–Ω–æ–º–∏–∫–∞": {
        "link": "https://t.me/ekon_cnh",
        "chat_id": "@ekon_cnh"
    },
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {
        "link": "https://t.me/th_hanel",
        "chat_id": "@th_hanel"
    },
    "–ø–æ–ª–∏—Ç–∏–∫–∞": {
        "link": "https://t.me/pol_cnh",
        "chat_id": "@pol_cnh"
    },
    "—Ä–∞–∑–Ω–æ–µ": {
        "link": "https://t.me/kras_cht",
        "chat_id": '@kras_cht'
    }
}

SYNONYMS = {
    "—Å–ø–æ—Ä—Ç": ["—Å–ø–æ—Ä—Ç", "—Ñ—É—Ç–±–æ–ª", "—Ö–æ–∫–∫–µ–π", " —Ç–µ–Ω–Ω–∏—Å", "–±–∞—Å–∫–µ—Ç–±–æ–ª", "–æ–ª–∏–º–ø–∏–∞–¥–∞", "–ª—ã–∂–∏", "–º—è—á",
              "—à–∞–π–±–∞", "–±–æ–∫—Å"],
    "—ç–∫–æ–Ω–æ–º–∏–∫–∞": ["—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã", "–±–∏–∑–Ω–µ—Å", "—Ä—ã–Ω–æ–∫", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–¥–µ–Ω—å–≥–∏", "–±–∞–Ω–∫"],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–≥–∞–¥–∂–µ—Ç—ã", "it", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai"],
    "–ø–æ–ª–∏—Ç–∏–∫–∞": ["–ø–æ–ª–∏—Ç–∏–∫–∞", "–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–≤—ã–±–æ—Ä—ã", "–ø–∞—Ä–ª–∞–º–µ–Ω—Ç", "–≤–ª–∞—Å—Ç—å", "–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä"],
    "—Ä–∞–∑–Ω–æ–µ": ["–∫—Ä–∞—Å–æ—Ç–∞", "–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–∞—Ä—Ç–∏—Å—Ç—ã", "–∫–∏–Ω–æ", "—à–æ—É", "—Ç–µ–∞—Ç—Ä", "–∑–¥–æ—Ä–æ–≤—å–µ", "–∂–µ–Ω–∞",
                "–∏–∑–º–µ–Ω–∞", "—Ä–µ—Ü–µ–ø—Ç—ã", "–º–∞–∫–∏—è–∂", "–∫—Ä–µ–º", "—É–∫–ª–∞–¥–∫–∞", "–º–æ—Ä—â–∏–Ω—ã", "–ø—Ä—ã—â–∏", "–≥–ª–∞–∑–∞", "–º—É–∂", "–Ω–æ—Å"]
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
user_selections = {}


def clean_html(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤"""
    if not text:
        return ""

    soup = BeautifulSoup(text, 'html.parser')
    clean_text = soup.get_text()
    clean_text = re.sub(r'&[a-z]+;', '', clean_text)
    clean_text = re.sub(r'<[^>]+>', '', clean_text)
    clean_text = re.sub(r'\s+', ' ', clean_text).strip()

    return clean_text


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            filters TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active INTEGER DEFAULT 1
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sent_news (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            link TEXT UNIQUE,
            title TEXT,
            published_at TIMESTAMP,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            news_count INTEGER DEFAULT 0,
            last_check TIMESTAMP,
            subscribers_count INTEGER DEFAULT 0,
            last_cleanup TIMESTAMP
        )
    """)

    cursor.execute("SELECT COUNT(*) FROM stats")
    if cursor.fetchone()[0] == 0:
        cursor.execute(
            "INSERT INTO stats (news_count, last_check, subscribers_count, last_cleanup) VALUES (0, CURRENT_TIMESTAMP, 0, CURRENT_TIMESTAMP)")

    conn.commit()
    conn.close()


async def add_subscriber(chat_id, username, first_name, last_name, filters):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            INSERT OR REPLACE INTO subscribers 
            (chat_id, username, first_name, last_name, filters, is_active) 
            VALUES (?, ?, ?, ?, ?, 1)
        """, (chat_id, username, first_name, last_name, " ".join(filters)))
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {filters}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
    finally:
        conn.close()


async def remove_subscriber(chat_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE subscribers SET is_active = 0 WHERE chat_id = ?", (chat_id,))
        conn.commit()
        logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
    finally:
        conn.close()


def get_subscriber_filters(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT filters FROM subscribers WHERE chat_id = ? AND is_active = 1", (chat_id,))
    result = cursor.fetchone()
    conn.close()
    if result and result[0]:
        return result[0].split()
    return []


def get_active_subscribers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, filters FROM subscribers WHERE is_active = 1")
    subscribers = cursor.fetchall()
    conn.close()
    return subscribers


def is_news_sent(link):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM sent_news WHERE link = ?", (link,))
    result = cursor.fetchone()[0] > 0
    conn.close()
    return result


def mark_news_as_sent(link, title, published_at):
    """–ü–æ–º–µ—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            INSERT OR IGNORE INTO sent_news (link, title, published_at)
            VALUES (?, ?, ?)
        """, (link, title, published_at))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    finally:
        conn.close()


def cleanup_old_news():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()

    try:
        cutoff_date = (datetime.now() - timedelta(days=NEWS_RETENTION_DAYS)).strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute("DELETE FROM sent_news WHERE published_at < ? OR sent_at < ?",
                       (cutoff_date, cutoff_date))
        deleted_count = cursor.rowcount
        conn.commit()
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        cursor.execute("UPDATE stats SET last_cleanup = CURRENT_TIMESTAMP")
        conn.commit()
        return deleted_count
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return 0
    finally:
        conn.close()


def update_stats(news_count=0, subscribers_count=0):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    try:
        if news_count > 0:
            cursor.execute("UPDATE stats SET news_count = news_count + ?, last_check = CURRENT_TIMESTAMP",
                           (news_count,))
        if subscribers_count > 0:
            cursor.execute("UPDATE stats SET subscribers_count = ?", (subscribers_count,))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        conn.close()


def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT news_count, last_check, subscribers_count, last_cleanup FROM stats")
    stats = cursor.fetchall()
    conn.close()
    if stats:
        return stats[0]
    return (0, None, 0, None)


def create_subscription_keyboard(current_filters=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if current_filters is None:
        current_filters = []

    keyboard = []
    for category in CHANNELS.keys():
        emoji = "‚úÖ" if category in current_filters else "‚óªÔ∏è"
        keyboard.append([InlineKeyboardButton(f"{emoji} {category.capitalize()}", callback_data=f"toggle_{category}")])

    keyboard.append([InlineKeyboardButton("üöÄ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe_confirm")])
    keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="unsubscribe_all")])

    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π!\n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )

    chat_id = update.effective_chat.id
    current_filters = get_subscriber_filters(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_selections[chat_id] = current_filters.copy()

    keyboard = create_subscription_keyboard(current_filters)

    await update.message.reply_text(welcome_message, reply_markup=keyboard, parse_mode="HTML")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    data = query.data

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if chat_id not in user_selections:
        user_selections[chat_id] = get_subscriber_filters(chat_id).copy()

    if data.startswith("toggle_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = data.replace("toggle_", "")

        if category in user_selections[chat_id]:
            user_selections[chat_id].remove(category)
        else:
            user_selections[chat_id].append(category)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
        keyboard = create_subscription_keyboard(user_selections[chat_id])
        await query.edit_message_reply_markup(reply_markup=keyboard)

    elif data == "subscribe_confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        current_filters = user_selections.get(chat_id, [])

        if not current_filters:
            await query.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
            return

        user = query.from_user
        await add_subscriber(
            chat_id,
            user.username,
            user.first_name,
            user.last_name,
            current_filters
        )

        links_msg = "\n".join([
            f"üîπ {filter_name.capitalize()}: {CHANNELS[filter_name]['link']}"
            for filter_name in current_filters
        ])

        response_message = (
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º: {', '.join(current_filters)}\n\n"
            f"üì∞ –ß–∏—Ç–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö:\n{links_msg}\n\n"
            "üîî –ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )

        await query.message.reply_text(response_message)
        update_stats(subscribers_count=len(get_active_subscribers()))

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if chat_id in user_selections:
            del user_selections[chat_id]

    elif data == "unsubscribe_all":
        # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await remove_subscriber(chat_id)
        await query.message.reply_text(
            "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        update_stats(subscribers_count=len(get_active_subscribers()))

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if chat_id in user_selections:
            del user_selections[chat_id]


async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É)"""
    chat_id = update.effective_chat.id
    current_filters = get_subscriber_filters(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_selections[chat_id] = current_filters.copy()

    keyboard = create_subscription_keyboard(current_filters)

    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏"""
    chat_id = update.effective_chat.id
    await remove_subscriber(chat_id)
    await update.message.reply_text(
        "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    update_stats(subscribers_count=len(get_active_subscribers()))

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id in user_selections:
        del user_selections[chat_id]


async def my_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = update.effective_chat.id
    current_filters = get_subscriber_filters(chat_id)

    if current_filters:
        filters_list = "\n".join([f"‚Ä¢ {f.capitalize()}" for f in current_filters])
        message = f"üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{filters_list}\n\n–ò–∑–º–µ–Ω–∏—Ç—å: /subscribe"
    else:
        message = "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

    await update.message.reply_text(message)


async def filters_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    filters_list = "\n".join([f"‚Ä¢ {key.capitalize()}" for key in CHANNELS.keys()])
    message = (
        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n{filters_list}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    )
    await update.message.reply_text(message)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_data = get_stats()
    if stats_data:
        news_count, last_check, subscribers_count, last_cleanup = stats_data
        last_check_str = last_check if last_check else "–Ω–∏–∫–æ–≥–¥–∞"
        last_cleanup_str = last_cleanup if last_cleanup else "–Ω–∏–∫–æ–≥–¥–∞"

        message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üì∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_count}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_str}\n"
            f"üßπ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—á–∏—Å—Ç–∫–∞: {last_cleanup_str}\n"
            f"üóëÔ∏è –ù–æ–≤–æ—Å—Ç–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è: {NEWS_RETENTION_DAYS} –¥–Ω–µ–π"
        )
    else:
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    await update.message.reply_text(message)


async def cleanup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    deleted_count = cleanup_old_news()
    await update.message.reply_text(
        f"üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {deleted_count}\n"
        f"–ù–æ–≤–æ—Å—Ç–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è: {NEWS_RETENTION_DAYS} –¥–Ω–µ–π"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/subscribe - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/myfilters - –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/filters - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üì∞ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã."
    )
    await update.message.reply_text(help_text)


async def fetch_rss_entries(url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ RSS –∑–∞–ø–∏—Å–µ–π"""
    loop = asyncio.get_event_loop()
    try:
        feed = await loop.run_in_executor(None, feedparser.parse, url)
        return feed.entries
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS ({url}): {e}")
        return []


async def fetch_all_rss_entries(urls):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö RSS-–∫–∞–Ω–∞–ª–æ–≤"""
    all_entries = []
    for url in urls:
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑: {url}")
        entries = await fetch_rss_entries(url)
        if entries:
            all_entries.extend(entries)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(entries)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {url}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {url}")
    return all_entries


def check_filter_match(text, filter_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
    text_lower = text.lower()

    if filter_name.lower() in text_lower:
        return True

    if filter_name in SYNONYMS:
        for synonym in SYNONYMS[filter_name]:
            if synonym in text_lower:
                return True

    return False


def extract_media_from_entry(entry):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ) –∏–∑ RSS –∑–∞–ø–∏—Å–∏"""
    photo_url = None
    video_url = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    if hasattr(entry, 'media_content'):
        for media in entry.media_content:
            if hasattr(media, 'type'):
                if 'image' in media.type:
                    photo_url = media.get('url')
                elif 'video' in media.type:
                    video_url = media.get('url')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
    if hasattr(entry, 'enclosures'):
        for enclosure in entry.enclosures:
            if hasattr(enclosure, 'type'):
                if 'image' in enclosure.type:
                    photo_url = enclosure.get('url')
                elif 'video' in enclosure.type:
                    video_url = enclosure.get('url')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not photo_url and hasattr(entry, 'links'):
        for link in entry.links:
            if hasattr(link, 'type') and 'image' in link.type:
                photo_url = link.get('href')

    return photo_url, video_url


async def send_news_to_channels(application, entries):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ"""
    sent_count = 0

    for entry in entries:
        link = entry.get('link', '')
        title = entry.get('title', '')
        summary = entry.get('summary', '')
        published = entry.get('published', '')

        if not link or not title:
            continue

        if is_news_sent(link):
            continue

        clean_title = clean_html(title)
        clean_summary = clean_html(summary)

        max_summary_length = 1500
        if len(clean_summary) > max_summary_length:
            clean_summary = clean_summary[:max_summary_length] + "..."

        message = (
            f"üì∞ <b>{clean_title}</b>\n\n"
            f"{clean_summary}\n\n"
            f"üîó <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
        photo_url, video_url = extract_media_from_entry(entry)

        full_text = f"{clean_title} {clean_summary}".lower()

        for filter_name, channel_info in CHANNELS.items():
            if check_filter_match(full_text, filter_name):
                try:
                    if video_url:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        await application.bot.send_video(
                            chat_id=channel_info['chat_id'],
                            video=video_url,
                            caption=message,
                            parse_mode=ParseMode.HTML
                        )
                        logger.info(f"üìπ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª {filter_name}")
                    elif photo_url:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        await application.bot.send_photo(
                            chat_id=channel_info['chat_id'],
                            photo=photo_url,
                            caption=message,
                            parse_mode=ParseMode.HTML
                        )
                        logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª {filter_name}")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                        await application.bot.send_message(
                            chat_id=channel_info['chat_id'],
                            text=message,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=True
                        )
                        logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ –∫–∞–Ω–∞–ª {filter_name}")

                    sent_count += 1
                    await asyncio.sleep(1)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_info['chat_id']}: {e}")

        if sent_count > 0:
            mark_news_as_sent(link, title, published)

    return sent_count


async def news_checker_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")

    try:
        entries = await fetch_all_rss_entries(RSS_FEED_URLS)
        if entries:
            sent_count = await send_news_to_channels(context.application, entries)
            if sent_count > 0:
                update_stats(news_count=sent_count)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–∫–∞–Ω–∞–ª–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ news_checker_job: {e}")


async def cleanup_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
    deleted_count = cleanup_old_news()
    if deleted_count > 0:
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    init_db()

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("myfilters", my_filters))
    application.add_handler(CommandHandler("filters", filters_list))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("cleanup", cleanup_command))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback))

    update_stats(subscribers_count=len(get_active_subscribers()))

    application.job_queue.run_repeating(news_checker_job, interval=CHECK_INTERVAL, first=10)
    application.job_queue.run_repeating(cleanup_job, interval=CLEANUP_INTERVAL, first=60)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(get_active_subscribers())}")
    logger.info(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSS-–∫–∞–Ω–∞–ª–æ–≤: {len(RSS_FEED_URLS)}")
    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ: {CLEANUP_INTERVAL / 3600} —á–∞—Å–æ–≤")
    logger.info(f"üóëÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {NEWS_RETENTION_DAYS} –¥–Ω–µ–π")

    application.run_polling()


if __name__ == "__main__":
    main()
